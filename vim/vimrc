" VAM
set runtimepath+=~/.vim/vim-addon-manager
call vam#ActivateAddons([ 'github:ervandew/supertab'])
call vam#ActivateAddons([ 'github:altercation/vim-colors-solarized'])
call vam#ActivateAddons([ 'github:scrooloose/nerdtree'])
call vam#ActivateAddons([ 'github:mattn/zencoding-vim'])
call vam#ActivateAddons([ 'github:yanick/vim-project'])
call vam#ActivateAddons([ 'github:tpope/vim-unimpaired'])
call vam#ActivateAddons([ 'github:tpope/vim-fugitive'])
call vam#ActivateAddons([ 'github:kien/ctrlp.vim'])
call vam#ActivateAddons([ 'github:tpope/vim-surround'])
call vam#ActivateAddons([ 'github:SirVer/ultisnips'])
call vam#ActivateAddons([ 'github:vim-perl/vim-perl'])
call vam#ActivateAddons([ 'github:vimwiki/vimwiki'])
 
call vam#ActivateAddons([ 'github:vim-scripts/hexman.vim'])

""" vimux """"""""""""""""""""""""""""""""""""""""""""""""""
"
call vam#ActivateAddons([ 'github:benmills/vimux' ])

" Run the current file with rspec
map <Leader>rb :call VimuxRunCommand("clear; rspec " . bufname("%"))<CR>

" Prompt for a command to run
map <Leader>vp :VimuxPromptCommand<CR>

" Run last command executed by VimuxRunCommand
map <Leader>vl :VimuxRunLastCommand<CR>

" Inspect runner pane
map <Leader>vi :VimuxInspectRunner<CR>

" Close vim tmux runner opened by VimuxRunCommand
map <Leader>vq :VimuxCloseRunner<CR>

" Interrupt any command running in the runner pane
map <Leader>vx :VimuxInterruptRunner<CR>

"
"""""""""""""""""""""""""""


""" vim-tmux-navigator """""""""""""""""""""""""""""""""""""""""""""""""
"

call vam#ActivateAddons([ 'github:christoomey/vim-tmux-navigator'])

"
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""

" vimwiki
"let g:vimwiki_list = [{ 'path': '~/vimwiki/', 'syntax': 'markdown', 'ext': '.md',  'nested_syntaxes': { 'perl': 'perl' } }]
let g:vimwiki_list = [{ 'path': '~/vimwiki/', 'syntax': 'markdown', 'ext': '.md'  }]
let g:vimwiki_menu = 'Vimwiki'

let g:UltiSnipsEditSplit='vertical'
cmap ,snip :UltiSnipsEdit<CR>



" some ideas stolen from http://items.sjbach.com/319/configuring-vim-right
set history=1000
"
" buffer stuff
set hidden

runtime macros/matchit.vim

set title

" show line numbers
set number

" folding 
set foldcolumn=3

" scrolling and viewport
nnoremap <C-e> 3<C-e>
nnoremap <C-y> 3<C-y>
set scrolloff=3

set ruler

nnoremap ' `
nnoremap ` '

" general stuff

syntax on
filetype on
filetype plugin on
filetype indent on

" visual bell
set vb


set autoindent
set textwidth=78
set backspace=indent,eol,start

set tabstop=4
set expandtab
set shiftwidth=4
set shiftround

set matchpairs+=<:>

iab phdr #! /usr/bin/perl -w
iab pdbg use Data::Dumper 'Dumper';<CR>warn Dumper [];^[hi


" Searching
set ignorecase   
set smartcase         " don't ignore case if there's a uppercase
set incsearch         " show me right now!
set hlsearch

" TList
nnoremap <silent> <F8> :Tlist<CR>


" TagExplorer
let TE_Ctags_Path = 'exuberant-ctags'
nnoremap <silent> <F7> :TagExplorer<CR>

" NerdTree
nnoremap <silent> <F9> :NERDTree<CR>


" backup stuff
set backup
set writebackup
set   backupdir=~/.vim/backup,./.backup,~/.vim/backup,.,/tmp
set   directory=~/.vim/backup,.,./.backup,/tmp

function InsertTabWrapper()
   let col = col('.') - 1
   if !col || getline('.')[col - 1] !~ '\k'
       return "\<tab>"
   else
       return "\<c-p>"
   endif
endfunction

"inoremap <tab> <c-r>=InsertTabWrapper()<cr>
" cute ai toggle
map ,<TAB> :set ai!<CR>:set ai?<CR>

" comment delimiters
map ,~ i#<ESC>59a~<ESC>o<ESC>
map ,# 60i#<ESC>o<ESC>


let mapleader = "\\"


"autocmd FileType perl source ~/.vim/my/perl_map.vim
"autocmd FileType perl map ,~ i3<ESC>59a~<ESC>o<ESC>
"autocmd FileType perl map ,3 60i3<ESC>o<ESC>

" Perl stuff

let g:Perl_AuthorName      = 'Yanick Champoux'     
let g:Perl_AuthorRef       = 'YANICK'                         
let g:Perl_Email           = 'yanick@cpan.org'            
let g:Perl_Company         = ''    

let tlist_perl_settings  = 'perl;c:constants;l:labels;p:package;s:subroutines;d:POD'

" taken from http://use.perl.org/~Ovid/journal/33567
fun! TestClassRunThisMethod()
    let save_cursor=getpos('.')
    let SAVE_TEST_METHOD=$TEST_METHOD

    call search('^sub \+\zs.*:.*Test','bcW')
    let $TEST_METHOD = expand('<cword>')
    exe '!printenv | sort'

    let $TEST_METHOD=SAVE_TEST_METHOD
    call setpos('.', save_cursor)
endfun

nnoremap <expr> ,tm TestClassRunThisMethod()

" ack for grep
set grepprg=ack\ --nocolor\ --nogroup\ '$*'\ *\ /dev/null
nmap <C-v><C-n> :cnext<CR>
imap <C-v><C-n> <Esc><C-v><C-n>
nmap <C-v><C-p> :cprev<CR>
imap <C-v><C-p> <Esc><C-v><C-p>

" begone, vile HTML indentation
autocmd BufEnter *.html setlocal indentexpr= 

set complete=.,w,b,u,t " omits ',i'. This avoids full file scans.

" ================= colorscheme ==============================
" gui
set t_Co=256
let g:solarized_termcolors=256
colorscheme solarized

hi search ctermbg=223 ctermfg=238
hi incsearch ctermbg=216 ctermfg=242

function! PerlMappings()
    " run the code
    noremap <buffer> <leader>r :!perl %<cr>
 
    " or check that it compiles
    noremap <buffer> <leader>r :!perl -c %<cr>
 
    " or run tall of the tests for it
    noremap <buffer> <leader>t :call TestModuleCoverage()<cr>
endfunction
 
function! PerlTestMappings()
    noremap <buffer> <leader>r :!prove -vl %<cr>
 
    " or check that it compiles
    noremap <buffer> <leader>r :!perl -c %<cr>
 
    noremap <buffer> <leader>t :!prove -vl %<CR>
endfunction
 
function! TestModuleCoverage()
    let filename = bufname('%')
 
    let tests = system('covered covering --source_file="'. filename .'"')
 
    let result  = split( tests, "\n" )
 
    if empty(result)
        echomsg "No tests found for: ". filename
    else
        execute ':!prove  ' . join(result)
    endif
endfunction

au BufRead,BufNewFile *.t set filetype=perl | compiler perlprove

au BufRead,BufNewFile entry* set filetype=galuga

map ,rf <Esc>:'<,'>! ~/bin/extract_perl_sub.pl<CR>

" copy filepath (relative) in unnamed buffer
nmap cf :let @"=expand("%")<CR>

" perlprove
au BufRead,BufNewFile *.t set filetype=perl | compiler perlprove

" http://babyl.dyndns.org/techblog/entry/statement-toggler
vmap <leader>f :! ~/bin/postfix_toggle.pl<CR>

" package name
map <leader>pack ! ~/bin/path2packagename.pl %<CR>j

" from http://www.slideshare.net/c9s/perlhacksonvim (Cornelius++)
nmap <C-x><C-i> :call InstallCPANModule()<CR>
function! InstallCPANModule()
    let l = getline('.')
    let cw = substitute( expand('<cWORD>'), ";$", "", "g" )
    let cw = substitute( cw, "['\"]", "", "g" )
    echo "installing module " . cw . "\n"
    exec "!cpanm " . cw
    echo "done\n"
endfunction

map <F12> :!ptags<CR>

" allow creation of directories on-the-fly
function s:MkNonExDir(file, buf)
    if empty(getbufvar(a:buf, '&buftype')) && a:file!~#'\v^\w+\:\/'
        let dir=fnamemodify(a:file, ':h')
        if !isdirectory(dir)
            call mkdir(dir, 'p')
        endif
    endif
endfunction

augroup BWCCreateDir
    autocmd!
    autocmd BufWritePre * :call s:MkNonExDir(expand('<afile>'), +expand('<abuf>'))
augroup END

map <S-F1> <ESC>:call Perl_perldoc()<CR>

" http://vim.wikia.com/wiki/Display_output_of_shell_commands_in_new_window
command! -complete=shellcmd -nargs=+ Shell call s:RunShellCommand(<q-args>)
" function!" s:RunShellCommand(cmdline)
"  echo a:cmdline
"  let expanded_cmdline = a:cmdline
"  for part in split(a:cmdline, ' ')
"     if part[0] =~ '\v[%#<]'
"        let expanded_part = fnameescape(expand(part))
"        let expanded_cmdline = substitute(expanded_cmdline, part, expanded_part, '')
"     endif
"  endfor
"  botright new
"  setlocal buftype=nofile bufhidden=wipe nobuflisted noswapfile nowrap
"  call setline(1, 'You entered:    ' . a:cmdline)
"  call setline(2, 'Expanded Form:  ' .expanded_cmdline)
"  call setline(3,substitute(getline(2),'.','=','g'))
"  execute '$read !'. expanded_cmdline
"  setlocal nomodifiable
"  1
" endfunction

function! s:ExecuteInShell(command)
  let command = join(map(split(a:command), 'expand(v:val)'))
  let winnr = bufwinnr('^' . command . '$')
  silent! execute  winnr < 0 ? 'botright new ' . fnameescape(command) : winnr . 'wincmd w'
  setlocal buftype=nowrite bufhidden=wipe nobuflisted noswapfile nowrap number
  echo 'Execute ' . command . '...'
  silent! execute 'silent %!'. command
  silent! execute 'resize ' . line('$')
  silent! redraw
  silent! execute 'au BufUnload <buffer> execute bufwinnr(' . bufnr('#') . ') . ''wincmd w'''
  silent! execute 'nnoremap <silent> <buffer> <LocalLeader>r :call <SID>ExecuteInShell(''' . command . ''')<CR>'
  echo 'Shell command ' . command . ' executed.'
endfunction
command! -complete=shellcmd -nargs=+ Shell call s:ExecuteInShell(<q-args>)

" http://learnvimscriptthehardway.stevelosh.com/chapters/07.html
nnoremap <leader>ev :vsplit $MYVIMRC<cr>
nnoremap <leader>sv :source $MYVIMRC<cr>

iabbrev @@ yanick@babyl.ca
iabbrev cpan@ yanick@cpan.org

" delete file
map <leader>rm <ESC>:!rm %<CR><ESC>:bd<CR>

nnoremap <C-H> :Hexmode<CR>
inoremap <C-H> <Esc>:Hexmode<CR>
vnoremap <C-H> :<C-U>Hexmode<CR>

" ex command for toggling hex mode - define mapping if desired
command -bar Hexmode call ToggleHex()

" helper function to toggle hex mode
function ToggleHex()
  " hex mode should be considered a read-only operation
  " save values for modified and read-only for restoration later,
  " and clear the read-only flag for now
  let l:modified=&mod
  let l:oldreadonly=&readonly
  let &readonly=0
  let l:oldmodifiable=&modifiable
  let &modifiable=1
  if !exists("b:editHex") || !b:editHex
    " save old options
    let b:oldft=&ft
    let b:oldbin=&bin
    " set new options
    setlocal binary " make sure it overrides any textwidth, etc.
    let &ft="xxd"
    " set status
    let b:editHex=1
    " switch to hex editor
    %!xxd
  else
    " restore old options
    let &ft=b:oldft
    if !b:oldbin
      setlocal nobinary
    endif
    " set status
    let b:editHex=0
    " return to normal editing
    %!xxd -r
  endif
  " restore values for modified and read only state
  let &mod=l:modified
  let &readonly=l:oldreadonly
  let &modifiable=l:oldmodifiable
endfunction

set mouse=a


""""""""""""""
" tmux fixes "
""""""""""""""
" thank you,
" http://stackoverflow.com/questions/8604150/with-term-screen-256color-under-tmux-home-and-end-keys-dont-work-why
" Handle tmux $TERM quirks in vim
if $TERM =~ '^screen-256color'
    map <Esc>OH <Home>
    map! <Esc>OH <Home>
    map <Esc>OF <End>
    map! <Esc>OF <End>
endif
